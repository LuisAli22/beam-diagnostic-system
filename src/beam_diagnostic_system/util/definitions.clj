(ns beam-diagnostic-system.util.definitions)

(def steelQuality "calidadAcero")
(def concreteQuality "calidadHormigon")
(def beamLength "longitud")
(def steelSection "areaAcero")
(def height "altura")
(def width "ancho")
(def supportPointAmount "cantidadPuntosApoyo")
(def lastBendingMoment "momentoFlectorUltimo")
(def nominalBendingMoment "momentoFlectorNominal")
(def lastShearTension "corteUltimo")
(def nominalShearTension "corteNominal")
(def longitudinalBarDiameter "diametroBarrasLongitudinales")
(def stirrupBarDiameter "diametroBarrasEstribos")
(def concreteCover "recubrimientoHormigon")
(def defaultBeamInputDataFile "src/beam_diagnostic_system/resources/beamDataFile.xlsx")
(def defaultConditionInputDataFile "src/beam_diagnostic_system/resources/conditionDataFile.xlsx")
(def defaultSheet "Hoja1")
(def OKHEIGHT "Altura ...OK")
(def OKSECTIONLIMIT "Limite de sección ...OK")
(def OKSECTION "Sección ...OK")
(def OKSHEAR "Corte ...OK")
(def OKBINDING "Flexión ...OK")
(def OKBEAM "VIGA BIEN DIMENSIONADA.")
(def NOTOKBEAM "VIGA MAL DIMENSIONADA")
(def TIME "Tiempo")
(def COST "Costo")
(def SPACE "Espacio")
(def LOAD "Carga")
(def PURCHASE "Adquisicion")
(def MUYRAPIDO "muy rapido")
(def RAPIDO "rapido")
(def LENTO "lento")
(def MUYLENTO "muy lento")
(def MUYDIFICIL "muy dificil")
(def DIFICIL "dificil")
(def FACIL "facil")
(def MUYFACIL "muy facil")
(def MUCHO "mucho")
(def SUFICIENTE "suficiente")
(def MODERADO "moderado")
(def POCO "poco")
(def MUYCARO "muy caro")
(def CARO "caro")
(def BARATO "barato")
(def MUYBARATO "muy barato")
(def PERFIL "Perfil")
(def PLANCHAACERO "Plancha de acero")
(def VIGARETICULADA "Viga reticulada")
(def ENCHAPEHORMIGON "Enchape de hormigon")
(def DUPLICARVIGA "Duplicar viga")
(def FIBRACARBONO "Fibra de carbono")
(def NONEEDREINFORCEMENT "No es necesario")
(def cliOptions
  [
    ["-f" "--file" "REQUIRED: Beam 's data file name"
    :default defaultBeamInputDataFile]
    ["-h" "--help" "Show help"
    :flag true
    :default false]]
)
(defn inputBeamDataFile [arguments]
  (if (= (first arguments) nil) defaultBeamInputDataFile (first arguments))
)
(defn inputConditionDataFile [arguments]
  (if (= (second arguments) nil) defaultConditionInputDataFile (second arguments))
)
